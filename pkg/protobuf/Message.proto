syntax = "proto3";

option go_package = ".;protobuf";

// The Asynchronous Batched VSS service definition
service ABVSS {
  rpc ReceiveShares(SharesMsg) returns (AckMsg){}
  rpc ReceiveLCM(LCMMsg) returns (AckMsg){}
  rpc ReconstructLCM(SKMsg) returns (AckMsg){}
  rpc ReceiveRecShares(SKMsg) returns (AckMsg) {}
}

service ABDKG {
  rpc ReceiveShares(SharesMsg) returns (AckMsg){}
  rpc ReceiveLCM(LCMMsg) returns (AckMsg){}
  rpc ReconstructLCM(SKMsg) returns (AckMsg){}
  rpc ReceiveRecShares(SKMsg) returns (AckMsg) {}
  rpc ReceiveOSV(OSVMsg)returns (AckMsg){}
}

// The one-sided voting service definition
service OSV {
  rpc Receive(OSVMsg)returns (AckMsg){}
}
service Conn {
  rpc Receive(TestHelloMessage) returns(TestResMessage){}
}

message TestHelloMessage {
  int64 fromID = 1;
  int64 destID = 2;
  string content = 3;
}

message TestResMessage {
  int64 fromID = 1;
  int64 destID = 2;
  string content = 3;
}

message Message {
  string type = 1;// instance id
  bytes id = 2;
  uint32 sender = 3;
  bytes data = 4;
}

// provable broadcast
message Value{
  bytes value = 1;// paload
  bytes validation = 2;// for external validating
}
message Echo{
  bytes sigshare = 1 ;
}

// smvba
message Lock{
  bytes value = 1;
  bytes sig = 2;
}
message Finish{
  bytes value = 1;
  bytes sig = 2;
}
message Done{
  bytes coinShare = 1 ;
}
message Halt{//Halt:=<Finish> of the round-leader
  bytes value = 1;
  bytes sig = 2;
}
message PreVote{
  bool vote = 1;
  bytes value = 2;
  bytes sig = 3;
}
message Vote{
  bool vote = 1;
  bytes value =2;
  bytes sig =3;
  bytes sigshare = 4;
}


//sDumbo
message Proposal{
  bytes tx = 1;
  repeated uint32 view = 2;
}

message BLock{
  bytes hash = 1;
  bytes sig = 2;
}

message BLockSetValue{
  repeated uint32 pid = 1;
  repeated bytes hash = 2;
}
message BLockSetValidation{
  repeated bytes sig = 1;
}

message Call{
  repeated uint32 indices = 1;
}
message Help{
  message ShardAndProof{
    bytes vc = 1;
    bytes shard =2;
    repeated bytes proof1 = 3;
    repeated int64 proof2 = 4;
  }
  repeated uint32 indices = 1;
  repeated ShardAndProof shardAndProof = 2;
}

//TSE
message Dec{
  uint32 id = 1;
  bytes decShare = 2;
}

//ABVSS
message SharesMsg{
  int64 instanceID = 1;
  int64 fromID = 2;
  int64 index = 3;
  repeated bytes zix = 4;
  repeated bytes ziy = 5;
  repeated bytes xix = 6;
  repeated bytes xiy = 7;
}

message LCMMsg{
  int64 instanceID = 1;
  int64 fromID = 2;
  int64 destID = 3;
  repeated bytes lcmi = 4;
}

message SKMsg{
  int64 instanceID = 1;
  int64 fromID = 2;
  int64 destID = 3;
  bytes sk = 4;
}

//one-sided voting
message OSVMsg{
  int64 instanceID = 1;
  int64 fromID = 2;
  int64 destID = 3;
  string mtype = 4;
}

message AckMsg{}